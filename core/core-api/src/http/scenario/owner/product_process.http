### Local Variable
@host=http://15.164.227.49:8080
@username="testowner"
@password="Owner123!!!"
@nickname="testowner"
@userRole="OWNER"

###
# @name 회원가입
POST {{host}}/api/v1/users
Content-Type: application/json

{
  "username": {{username}},
  "password": {{password}},
  "nickname": {{nickname}},
  "userRole": {{userRole}}
}

###
# @name 로그인
POST {{host}}/api/v1/users/authorization
Content-Type: application/json

{
  "username": {{username}},
  "password": {{password}}
}

> {%
  // 응답에서 액세스 토큰 추출
  client.global.set("accessToken", response.body.data.split(" ")[1]);

  // Base64 디코딩 함수
  function base64Decode(str) {
    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    let output = '';
    let buffer = 0;
    let bits = 0;
    let value = 0;

    for (let i = 0; i < str.length; i++) {
      value = chars.indexOf(str.charAt(i));
      buffer = (buffer << 6) | value;
      bits += 6;

      if (bits === 24) {
        output += String.fromCharCode((buffer >> 16) & 0xff);
        output += String.fromCharCode((buffer >> 8) & 0xff);
        output += String.fromCharCode(buffer & 0xff);
        buffer = bits = 0;
      }
    }

    if (bits === 12) {
      buffer = buffer >> 4;
      output += String.fromCharCode(buffer & 0xff);
    } else if (bits === 18) {
      buffer = buffer >> 2;
      output += String.fromCharCode((buffer >> 8) & 0xff);
      output += String.fromCharCode(buffer & 0xff);
    }

    return decodeURIComponent(escape(output));
  }

  // JWT 디코딩 함수
  function parseJwt(token) {
    let base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = base64Decode(base64);

    return JSON.parse(jsonPayload);
  }

  // 토큰 디코딩
  const decodedToken = parseJwt(client.global.get("accessToken"));

  // userUuid 파싱
  client.global.set("userUuid", decodedToken.uuid);

  client.log(client.global.get("accessToken"))
  client.log(client.global.get("userUuid"))
%}

###
# @name 유저 상세 조회
GET {{host}}/api/v1/users/{{userUuid}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###
# @name 카테고리 등록
POST {{host}}/api/v1/category
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "치킨"
}

> {%
  client.global.set("categoryUuid", response.body.data.uuid);
%}

###
# @name 카테고리 목록 조회
GET {{host}}/api/v1/category
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###
# @name 가게 등록
POST {{host}}/api/v1/stores
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "BBQ",
  "description": "비비큐",
  "fullAddress": "xx시 yy구 zz동",
  "categoryUuid": "{{categoryUuid}}"
}

> {%
  client.global.set("storeUuid", response.body.data.uuid);
%}

###
# @name 가게 목록 조회
GET {{host}}/api/v1/stores?
    cursor=&
    limit=10&
    sortKey=createdAt&
    sort=DESC
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###
# @name 상품 등록
POST {{host}}/api/v1/products
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "황금올리브 핫 윙",
  "description": "겉바속촉",
  "unitPrice": 23000,
  "storeUuid": "{{storeUuid}}"
}

###
# @name 상품 목록 조회
GET {{host}}/api/v1/products?
    cursor=&
    limit=10&
    sortKey=createdAt&
    sort=DESC
Authorization: Bearer {{accessToken}}
Content-Type: application/json