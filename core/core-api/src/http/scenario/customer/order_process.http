### Local Variable
@host=http://localhost:8080
@username="testuser"
@password="User123!!!"
@nickname="nickname"
@userRole="CUSTOMER"
@storeUuid=550e8400-e29b-41d4-a716-446655440004

###
# @name 회원가입
POST {{host}}/api/v1/users
Content-Type: application/json

{
  "username": {{username}},
  "password": {{password}},
  "nickname": {{nickname}},
  "userRole": {{userRole}}
}

###
# @name 로그인
POST http://localhost:8080/api/v1/users/authorization
Content-Type: application/json

{
  "username": {{username}},
  "password": {{password}}
}

> {%
  // 응답에서 액세스 토큰 추출
  client.global.set("accessToken", response.body.data.split(" ")[1]);

  // Base64 디코딩 함수
  function base64Decode(str) {
    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    let output = '';
    let buffer = 0;
    let bits = 0;
    let value = 0;

    for (let i = 0; i < str.length; i++) {
      value = chars.indexOf(str.charAt(i));
      buffer = (buffer << 6) | value;
      bits += 6;

      if (bits === 24) {
        output += String.fromCharCode((buffer >> 16) & 0xff);
        output += String.fromCharCode((buffer >> 8) & 0xff);
        output += String.fromCharCode(buffer & 0xff);
        buffer = bits = 0;
      }
    }

    if (bits === 12) {
      buffer = buffer >> 4;
      output += String.fromCharCode(buffer & 0xff);
    } else if (bits === 18) {
      buffer = buffer >> 2;
      output += String.fromCharCode((buffer >> 8) & 0xff);
      output += String.fromCharCode(buffer & 0xff);
    }

    return decodeURIComponent(escape(output));
  }

  // JWT 디코딩 함수
  function parseJwt(token) {
    let base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = base64Decode(base64);

    return JSON.parse(jsonPayload);
  }

  // 토큰 디코딩
  const decodedToken = parseJwt(client.global.get("accessToken"));

  // userUuid 파싱
  client.global.set("userUuid", decodedToken.uuid);

  client.log(client.global.get("accessToken"))
  client.log(client.global.get("userUuid"))
%}

###
# @name 유저 상세 조회
GET {{host}}/api/v1/users/{{userUuid}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###
# @name 주문 요청
POST {{host}}/api/v1/orders
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "orderType": "ONLINE",
  "buyer": {
    "nickname": {{nickname}},
    "userUuid": "{{userUuid}}"
  },
  "storeUuid": "{{storeUuid}}",
  "orderItems": [
    {
      "name": "Burger",
      "unitPrice": 5000,
      "productUuid": "{{$uuid}}"
    },
    {
      "name": "Fries",
      "unitPrice": 2000,
      "productUuid": "{{$uuid}}"
    }
  ]
}

> {%
  client.global.set("orderUuid", response.body.data.orderUuid);
%}

###
# @name 결제 요청
POST {{host}}/api/v1/payments
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "paymentType": "CREDIT_CARD",
  "userUuid": "{{userUuid}}",
  "orderUuid": "{{orderUuid}}",
  "storeUuid": "{{storeUuid}}"
}

###
# @name 내 주문 조회 (고객)
GET {{host}}/api/v1/orders/users/{{userUuid}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###
# @name 주문 접수완료 (사장님)
PUT {{host}}/api/v1/orders/{{userUuid}}/received
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###
# @name 상세 조회 (고객)
GET {{host}}/api/v1/orders/{{userUuid}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###
# @name 주문 배송중 (사장님)
PUT {{host}}/api/v1/orders/{{userUuid}}/shipping
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###
# @name 상세 조회 (고객)
GET {{host}}/api/v1/orders/{{userUuid}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###
# @name 주문 배송완료 (사장님)
PUT {{host}}/api/v1/orders/{{userUuid}}/delivered
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###
# @name 상세 조회 (고객)
GET {{host}}/api/v1/orders/{{userUuid}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json